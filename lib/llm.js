import fetch from 'node-fetch';

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

if (!GEMINI_API_KEY) {
  throw new Error('‚ùå GEMINI_API_KEY is required in environment variables');
}

/**
 * Generate code using Google Gemini API
 */
export async function generateCode(prompt, context = '') {
  console.log('ü§ñ Generating code with Gemini...');
  
  const fullPrompt = `
You are an expert web developer. Create a complete, functional web application based on the requirements below.

REQUIREMENTS:
${prompt}

${context ? `CONTEXT/REVISIONS:\n${context}` : ''}

INSTRUCTIONS:
- Generate a SINGLE HTML file with embedded CSS and JavaScript
- Make it fully functional and self-contained
- Use modern HTML5, CSS3, and ES6+ JavaScript
- Include proper error handling
- Make it mobile-responsive
- Include clear user interface with status updates
- All code must be in one file with <style> and <script> tags
- Use CDN resources if needed (jsdelivr, unpkg, cdnjs)
- Ensure it works on GitHub Pages

Respond with ONLY the complete HTML code, no explanations.
`.trim();

  const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`;

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: fullPrompt
          }]
        }],
        generationConfig: {
          temperature: 0.2,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 8192,
        }
      }),
      timeout: 60000
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Gemini API error (${response.status}): ${errorText}`);
    }

    const data = await response.json();
    const generatedText = data?.candidates?.[0]?.content?.parts?.[0]?.text?.trim();

    if (!generatedText) {
      throw new Error('No content generated by Gemini');
    }

    console.log('‚úÖ Code generation completed');
    return generatedText;

  } catch (error) {
    console.error('‚ùå Gemini API request failed:', error.message);
    
    // Fallback template if Gemini fails
    return generateFallbackTemplate(prompt);
  }
}

/**
 * Fallback template when LLM fails
 */
function generateFallbackTemplate(requirements) {
  return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generated Application</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        .container {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            text-align: center;
            max-width: 500px;
            width: 100%;
        }
        h1 {
            color: #333;
            margin-bottom: 1rem;
        }
        .status {
            padding: 1rem;
            margin: 1rem 0;
            border-radius: 5px;
            background: #f8f9fa;
            border-left: 4px solid #007bff;
        }
        .success {
            background: #d4edda;
            border-left-color: #28a745;
            color: #155724;
        }
        .error {
            background: #f8d7da;
            border-left-color: #dc3545;
            color: #721c24;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Generated Application</h1>
        <div class="status">
            <p>This application was generated based on your requirements:</p>
            <p><strong>${requirements.substring(0, 100)}...</strong></p>
        </div>
        <div class="status success">
            <p>‚úÖ Application is running successfully</p>
        </div>
        <div id="dynamic-content">
            <p>Dynamic functionality would be implemented here based on specific requirements.</p>
        </div>
    </div>

    <script>
        console.log('Application loaded successfully');
        
        // Basic functionality
        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const statusEl = document.getElementById('dynamic-content');
            
            if (urlParams.toString()) {
                statusEl.innerHTML = '<p>URL Parameters detected: ' + urlParams.toString() + '</p>';
            }
            
            // Simulate some dynamic behavior
            setTimeout(() => {
                const newEl = document.createElement('div');
                newEl.className = 'status';
                newEl.innerHTML = '<p>üïí Application has been running for 3 seconds</p>';
                document.querySelector('.container').appendChild(newEl);
            }, 3000);
        });
    </script>
</body>
</html>`;
}